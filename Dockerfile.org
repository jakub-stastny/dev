#+TITLE: My development environment image
#+AUTHOR: Jakub Šťastný

* Dockerfile
  :PROPERTIES:
  :header-args: :tangle Dockerfile
  :END:

** Use the latest Ubuntu

#+begin_src dockerfile
  FROM ubuntu:latest
#+end_src

** Set =WORKDIR= to =/root=

#+begin_src dockerfile
  WORKDIR /root
#+end_src

** Set =TERM to =xterm-256color=

Silence =tput= warnings and show colours instead.

#+begin_src dockerfile
  ENV TERM=xterm-256color
#+end_src

** Set up =$PATH=

Even though we do this in dotfiles, having it exported means we can use these custom scripts when building a DPM image. For instance in the home image we use dotfiles from =~/.script/dotfiles=.

This has less importance now, since we switched to connecting to the image directly over SSH, which doesn't respect ENV variables, but it's still useful, for instance so we can do =dotfiles pull -r= in our project =Dockerfile=.

#+begin_src dockerfile
  ENV PATH="/root/.scripts:${PATH}"
#+end_src

** Update APT cache and upgrade packages

+begin_src dockerfile
  RUN apt-get update > /dev/null && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y > /dev/null
+end_src

** Fix locale

Ubuntu has broken locale. We need to set the variables here, in order for them to be available both to the install script and to the final environment. Locale is generated in the install script.

There's a Perl locale error when setting up locales. Ignore.

#+begin_src dockerfile
  ENV LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8
  RUN apt-get install -y locales > /dev/null && locale-gen $LC_ALL
#+end_src

** Install apt-utils

Installing =apt-utils= will stop annoying warning every time I try to install something.

#+begin_src dockerfile
  RUN DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils > /dev/null
#+end_src

** Install ZSH and babashka as a prerequisite for the build scripts

#+begin_src dockerfile
  RUN DEBIAN_FRONTEND=noninteractive apt-get install -y zsh curl > /dev/null
  RUN curl https://raw.githubusercontent.com/babashka/babashka/master/install | bash
#+end_src

** Add the build scripts

I purposedly want to leave the scripts in the build, as they might come in handy for future inspection.

I don't do =ADD /build=, since any change in any of the files invalidates Docker cache.

#+begin_src dockerfile
  ADD scripts/unminimise-system /build/unminimise-system
  RUN /build/unminimise-system

  ADD scripts/install-emacs-dependencies /build/install-emacs-dependencies
  RUN /build/install-emacs-dependencies

  ADD scripts/build-emacs /build/build-emacs
  RUN /build/build-emacs

  ADD scripts/install-basic-tools /build/install-basic-tools
  RUN /build/install-basic-tools

  ADD scripts/add-node-sources /build/add-node-sources
  RUN /build/add-node-sources

  ADD scripts/set-up-time-zone /build/set-up-time-zone
  RUN /build/set-up-time-zone

  ADD scripts/install-dotfiles /build/install-dotfiles
  RUN /build/install-dotfiles

  ADD scripts/install-clojure-cli /build/install-clojure-cli
  RUN /build/install-clojure-cli

  ADD scripts/install-gh-cli /build/install-gh-cli
  RUN /build/install-gh-cli

  ADD scripts/make-zsh-the-default-shell /build/make-zsh-the-default-shell
  RUN /build/make-zsh-the-default-shell

  ADD scripts/secure-installation /build/secure-installation
  RUN /build/secure-installation
#+end_src

** Save build metadata

We are passing these build args to =docker build= in [[./bin/build]].

#+begin_src dockerfile
  ARG DOCKER_IMAGE_GIT_SHA
  ARG DOCKER_IMAGE_BUILD_DATE

  ENV DOCKER_IMAGE_GIT_SHA=$DOCKER_IMAGE_GIT_SHA
  ENV DOCKER_IMAGE_BUILD_DATE=$DOCKER_IMAGE_BUILD_DATE
#+end_src

** Run OpenSSH server

#+begin_src dockerfile
  ENV SSHD_PORT=2222
  CMD /usr/sbin/sshd -p $SSHD_PORT -D -e
#+end_src

* The build scripts
  :PROPERTIES:
  :header-args: :noweb yes :shebang #!/usr/bin/env bb :mkdirp yes
  :END:

** Helpers

Keep in mind that changing the helpers will invalidate Docker cache for all the build scripts.

*** TODO Refactor to group side-effects in one place

Since this is just the first working version, I didn't bother with the design, but now it should be refactored to behave more declaratively: to generate a representation of the commands, rather than executing them directly.

Only after we get to the end of the =block=, the commands in it should execute and that's when all the side-effects should happen.

*** TODO Show current duration of execution

- [[https://book.babashka.org/#core_async][Babashka async]]
- [[https://stackoverflow.com/questions/5290994/remove-and-replace-printed-items#5291396][ASCII escape sequence \r]]

#+name: bb-helpers
#+begin_src clojure
  (require '[clojure.java.shell :refer [sh with-sh-dir]])

  (defn zsh
    ([command] (sh "zsh" "-c" command))
    ([command env] (apply sh "zsh" "-c" command env)))

  (def colours {
    :red 31 :green 32 :yellow 33
    :blue 34 :purple 35 :cyan 36
    :grey 37})

  ; \033[fg;bgm
  (defn colour [colour text]
    (let [colour-code (colour colours)]
      (str "\033[" colour-code "m" text "\033[0m")))

  (defn current-unix-time [] (quot (System/currentTimeMillis) 1000))

  (defn format-duration [duration]
    (let [colour-name (cond (< duration 35) :green (< duration 90) :yellow :else :red)]
     (cond
       (< duration 60) (colour colour-name (str duration "s"))
       (> duration 60) (colour colour-name (str (int (/ duration 60.0)) ":" (format "%02d" (mod duration 60)) "m")))))

  (defn format-duration-wrapper
    ([duration] (if (<= duration 3) "" (str "took " (format-duration duration) ".")))
    ([duration lambda] (if (<= duration 3) "" (lambda (format-duration-wrapper duration)))))

  (defn run [command & rest]
    (let [start-time (current-unix-time)]
      (print (str "  " (colour :green "λ ") (colour :grey command)) "")
      (flush)
      (let [result (zsh command rest)]
        (let [duration (- (current-unix-time) start-time)]
          (let [format-fn (fn [formatted-duration-string] (str "... " formatted-duration-string))]
            (println (format-duration-wrapper duration format-fn)))
          result))))

  (defn fail [result]
    (println (str (colour :red "    Error ") (:exit result)))
    (let [out (:out result) err (:err result)]
      (when-not (empty? out) (println out))
      (when-not (empty? err) (println err)))
    (System/exit 1))

  (defn ensure-success [result]
    (if (= (:exit result) 0) result (fail result)))

  (defn label [text]
    (println (colour :purple text)))

  (defmacro block [name & sexps]
    `(do
      (println "\nRunning block" (str (colour :purple ~name) ".\n"))
      (let [start-time (current-unix-time)]
        (do ~@sexps)
        (let [duration (- (current-unix-time) start-time)]
          (println (colour :cyan "\n  ~") "Block" (colour :grey ~name) (format-duration-wrapper duration) "\n")))))

  (defn package [& names]
    (let [command (str "apt-get install -y " (clojure.string/join " " names))]
      (ensure-success (run command :env {"DEBIAN_FRONTEND" "noninteractive"}))))
#+end_src

** Unminimise the system

This makes man pages available.

Gives =Reinstallation of gh is not possible, it cannot be downloaded.=, so GH CLI has to be installed after.

#+begin_src clojure :tangle scripts/unminimise-system
  <<bb-helpers>>

  (block "unminimising the system"
    (package "man")
    (ensure-success (run "yes | unminimize")))
#+end_src

** Install Emacs 28 with native compilation, fast JSON parser and better redo

#+begin_src clojure :tangle scripts/install-emacs-dependencies
  <<bb-helpers>>

  (block "installing Emacs dependencies"
    (package "git")
    (ensure-success (run "git clone --depth 1 https://git.savannah.gnu.org/git/emacs.git"))

    ; Dependencies from https://packages.ubuntu.com/impish/emacs-nox (libncurses-dev isn't listed, but is required)
    (package "libacl1" "libasound2" "libc6" "libdbus-1-3" "libgmp10" "libgnutls28-dev" "libgpm2" "libjansson4" "liblcms2-2" "libselinux1" "libsystemd0" "libtinfo6" "libxml2" "zlib1g" "libncurses-dev")

    ; Dependencies for building Emacs.
    (package "build-essential" "texinfo" "autoconf" "pkg-config")

    ; Needed for fast JSON
    (package "libjansson4" "libjansson-dev")

    ; Dependencies for native compilation
    (package "zlib1g-dev" "libgccjit0" "libgccjit-10-dev" "gcc-10"))
#+end_src

#+begin_src clojure :tangle scripts/build-emacs
  <<bb-helpers>>

  (block "building Emacs 28 with native compilation and fast JSON"
    (with-sh-dir "emacs"
      (let [path (System/getenv "PATH") cc "gcc-10"]
        (ensure-success (run "./autogen.sh" :env "PATH" path))
        (ensure-success (run "./configure --with-native-compilation" :env "PATH" path "CC" cc))
        (ensure-success (run "make -j$(nproc)" :env "PATH" path "CC" cc))
        (ensure-success (run "make install" :env "PATH" path))))
    (ensure-success (run "rm -rf emacs")))
#+end_src

** Install basic tools

=expect-dev= is for autologin scripts.

#+begin_src clojure :tangle scripts/install-basic-tools
  <<bb-helpers>>

  (block "installing basic tools"
    (package "locales" "automake" "htop" "curl" "wget" "git" "silversearcher-ag" "neovim" "docker.io" "tmux" "tree" "expect-dev"))
#+end_src

** Node.js & Yarn sources

Add Yarn sources (without installing it).
https://yarnpkg.com/lang/en/docs/install/#debian-stable
https://github.com/nodesource/distributions

# curl -fsSL https://deb.nodesource.com/setup_16.x | bash -

#+begin_src clojure :tangle scripts/add-node-sources
  <<bb-helpers>>

  (block "adding apt sources for Node.js"
    (package "gnupg")
    (ensure-success (run "curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo deb https://dl.yarnpkg.com/debian/ stable main | tee /etc/apt/sources.list.d/yarn.list")))
#+end_src

** Time zone

#+begin_src clojure :tangle scripts/set-up-time-zone
  <<bb-helpers>>

  (block "setting up time zone"
    (package "tzdata")
    (ensure-success (run "echo America/New_York > /etc/timezone"))
    (ensure-success (run "dpkg-reconfigure -f noninteractive tzdata")))
#+end_src

** Dotfiles

Our =WORKDIR= is =/root=, so we don't have to =cd= anywhere.

*** Install traditional dotfiles

#+begin_src clojure :tangle scripts/install-dotfiles
  <<bb-helpers>>

  (block "installing dotfiles"
    (ensure-success (run "mkdir .ssh && chmod 700 .ssh && git clone https://github.com/jakub-stastny/dotfiles.git .dotfiles.git --bare && git --git-dir=/root/.dotfiles.git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*' && git --git-dir=/root/.dotfiles.git fetch && git --git-dir=/root/.dotfiles.git branch --set-upstream-to=origin/master master && git --git-dir=/root/.dotfiles.git --work-tree=/root checkout && ssh-keyscan github.com >> ~/.ssh/known_hosts && zsh ~/.scripts/hooks/dotfiles.install && git --git-dir=/root/.dotfiles.git remote set-url origin git@github.com:jakub-stastny/dotfiles.git && rm -rf ~/.ssh")))
#+end_src

*** Install literate dotfiles

#+name: tangle
#+begin_src elisp :tangle no
  (progn (dolist (file command-line-args-left) (with-current-buffer (find-file-noselect file) (org-babel-tangle))))
#+end_src

#+begin_src clojure :tangle scripts/install-dotfiles
  (block "tangling literate dotfiles"
    (with-sh-dir "/root/org"
      (ensure-success (run "emacs -Q --batch --eval '<<tangle>>' **/*.org"))))
#+end_src

** Clojure CLI

#+begin_src clojure :tangle scripts/install-clojure-cli
  (block "installing Clojure CLI"
    (let [script-name "linux-install.sh"]
      (ensure-success (run (str "curl https://download.clojure.org/install/linux-install-1.10.3.855.sh -o " script-name)))
      (ensure-success (run (str "./" script-name)))))
#+end_src

** GH CLI

#+begin_src clojure :tangle scripts/install-gh-cli
  <<bb-helpers>>

  (block "installing GitHub CLI"
    (ensure-success (run "curl curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg"))
    (ensure-success (run "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list"))
    (ensure-success (run "apt-get update"))
    (package "gh"))
#+end_src

** Make ZSH the default shell

#+begin_src clojure :tangle scripts/make-zsh-the-default-shell
  <<bb-helpers>>

  (block "making ZSH the default shell"
    (ensure-success (run "chsh -s $(which zsh)")))
#+end_src

** Set up SSH and change root password

#+begin_src clojure :tangle scripts/secure-installation
  <<bb-helpers>>

  (block "setting up OpenSSH server and securing the installation"
    (package "openssh-server" "mosh")
    (ensure-success (run "mkdir /run/sshd"))
    (ensure-success (run "echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config"))
    (ensure-success (run "echo \"root:$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32)\" | chpasswd")))
#+end_src
