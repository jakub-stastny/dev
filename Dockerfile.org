#+TITLE: My development environment image
#+AUTHOR: Jakub Šťastný

* Dockerfile
  :PROPERTIES:
  :header-args: :tangle Dockerfile
  :END:

** Use the latest Ubuntu

#+begin_src dockerfile
  FROM ubuntu:latest
#+end_src

** Set =WORKDIR= to =/root=

#+begin_src dockerfile
  WORKDIR /root
#+end_src

** Set =TERM to =xterm-256color=

Silence =tput= warnings and show colours instead.

#+begin_src dockerfile
  ENV TERM=xterm-256color
#+end_src

** Set up =$PATH=

Even though we do this in dotfiles, having it exported means we can use these custom scripts when building a DPM image. For instance in the home image we use dotfiles from ~/.script/dotfiles.

#+begin_src dockerfile
  ENV PATH="/root/.scripts:${PATH}"
#+end_src

** Fix locale

- Ubuntu has broken locale. We need to set the variables here, in order for them to be available both to the install script and to the final environment.
- Locale is generated in the install script.
- There's a Perl locale error when setting up locales. Ignore.

#+begin_src dockerfile
  RUN apt-get update > /dev/null && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y > /dev/null

  ENV LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8
  RUN apt-get install -y locales > /dev/null && locale-gen $LC_ALL
#+end_src

** Install apt-utils in order to avoid annoying warnings every time I try to install anything

#+begin_src dockerfile
  RUN DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils > /dev/null
#+end_src

** Install ZSH and babashka as a prerequisite for the build scripts

#+begin_src dockerfile
  RUN DEBIAN_FRONTEND=noninteractive apt-get install -y zsh curl > /dev/null
  RUN curl https://raw.githubusercontent.com/babashka/babashka/master/install | bash
#+end_src

** Add the build scripts

- Let's not delete the build scripts afterwards, they might come in handy for future inspection.

- Whatever runs inside the script don't get cached,
- not suited for compilations.

- With that said this should be environment agnostic,
- it should provide sources to install commonly used
- utilities, not necessary include them.

Since the =mtime= will change every time we tangle this file.

BROKEN into several scripts, that way we get caching.

#+begin_src dockerfile
  ADD scripts/unminimise-system /build/unminimise-system
  RUN /build/unminimise-system

  ADD scripts/build-emacs /build/build-emacs

  ADD scripts/install-basic-tools /build/install-basic-tools
  RUN /build/install-basic-tools

  ADD scripts/install /build/install
  RUN /build/install
#+end_src

** Save build metadata and log

We are passing these build args to =docker build= in [[./bin/build]].

#+begin_src dockerfile
  ARG DOCKER_IMAGE_GIT_SHA
  ARG DOCKER_IMAGE_BUILD_DATE

  ENV DOCKER_IMAGE_GIT_SHA=$DOCKER_IMAGE_GIT_SHA
  ENV DOCKER_IMAGE_BUILD_DATE=$DOCKER_IMAGE_BUILD_DATE

  # TODO: Move to the very end
  # TODO: Add every command's STDOUT/STDERR (redirect STDERR to STDOUT) log. I. e. /tmp/var/log/build/<command-name>.log.
  ADD build.log /
#+end_src

** Run OpenSSH server

#+begin_src dockerfile
  ENV SSHD_PORT=2222
  CMD /usr/sbin/sshd -p $SSHD_PORT -D -e
#+end_src

* The build scripts
  :PROPERTIES:
  :header-args: :shebang #!/usr/bin/env bb :mkdirp yes :noweb yes
  :END:

** Helpers

The helpers are good, but the downside is that changing anything in them will change all the build scripts, which then invalidates Docker cache.

Maybe rather than going noweb, I should make it a separate file and include it? But I'd have to ADD it first, and that'd invalidate the cache anyway.

*** TODO Show current duration of execution

https://book.babashka.org/#core_async
https://stackoverflow.com/questions/5290994/remove-and-replace-printed-items#5291396 \r to return and overwrite the line

#+name: bb-helpers
#+begin_src clojure
  (require '[clojure.java.shell :refer [sh with-sh-dir with-sh-env]])

  (defn zsh
    ([command] (sh "zsh" "-c" command))
    ([command env] (apply sh "zsh" "-c" command env)))

  (def colours {
    :red 31 :green 32 :yellow 33
    :blue 34 :purple 35 :cyan 36
    :grey 37})

  ; \033[fg;bgm
  (defn colour [colour text]
    (let [colour-code (colour colours)]
      (str "\033[" colour-code "m" text "\033[0m")))

  (defn current-unix-time [] (quot (System/currentTimeMillis) 1000))

  (defn format-duration [duration]
    (let [colour-name (cond (< duration 35) :green (< duration 90) :yellow :else :red)]
     (cond
       (< duration 60) (colour colour-name (str duration "s"))
       (> duration 60) (colour colour-name (str (int (/ duration 60.0)) ":" (format "%02d" (mod duration 60)) "m")))))

  (defn format-duration-wrapper
    ([duration] (if (<= duration 3) "" (str "took " (format-duration duration) ".")))
    ([duration lambda] (if (<= duration 3) "" (lambda (format-duration-wrapper duration)))))

  (defn run [command & rest]
    (let [start-time (current-unix-time)]
      (print (str "  " (colour :green "λ ") (colour :grey command)) "")
      (flush)
      (let [result (zsh command rest)]
        (let [duration (- (current-unix-time) start-time)]
          (let [format-fn (fn [formatted-duration-string] (str "... " formatted-duration-string))]
            (println (format-duration-wrapper duration format-fn)))
          result))))

  (defn fail [result]
    (println (str (colour :red "    Error ") (:exit result)))
    (let [out (:out result) err (:err result)]
      (when-not (empty? out) (println out))
      (when-not (empty? err) (println err)))
    (System/exit 1))

  (defn ensure-success [result]
    (if (= (:exit result) 0) result (fail result)))

  (defn label [text]
    (println (colour :purple text)))

  (defmacro block [name & sexps]
    `(do
      (println "\nRunning block" (str (colour :purple ~name) ".\n"))
      (let [start-time (current-unix-time)]
        (do ~@sexps)
        (let [duration (- (current-unix-time) start-time)]
          (println (colour :cyan "\n  ~") "Block" (colour :grey ~name) (format-duration-wrapper duration) "\n")))))

  (defn package [& names]
    (let [command (str "apt-get install -y " (clojure.string/join " " names))]
      (ensure-success (run command :env {"DEBIAN_FRONTEND" "noninteractive"}))))
#+end_src

** Unminimise the system

This makes man pages available.

Gives =Reinstallation of gh is not possible, it cannot be downloaded.=, so GH CLI has to be installed after.

#+begin_src clojure :tangle scripts/unminimise-system
  <<bb-helpers>>

  (block "unminimising the system"
    (package "man")
    (ensure-success (run "yes | unminimize")))
#+end_src

** Install Emacs 28 with native compilation, fast JSON parser and better redo

#+begin_src clojure :tangle scripts/build-emacs
  <<bb-helpers>>

  ;; (block "installing Emacs dependencies"
  ;;   (package "git")
  ;;   (ensure-success (run "git clone --depth 1 https://git.savannah.gnu.org/git/emacs.git"))

  ;;   ; Dependencies from https://packages.ubuntu.com/impish/emacs-nox (libncurses-dev isn't listed, but is required)
  ;;   (package "libacl1" "libasound2" "libc6" "libdbus-1-3" "libgmp10" "libgnutls28-dev" "libgpm2" "libjansson4" "liblcms2-2" "libselinux1" "libsystemd0" "libtinfo6" "libxml2" "zlib1g" "libncurses-dev")

  ;;   ; Dependencies for building Emacs.
  ;;   (package "build-essential" "texinfo" "autoconf" "pkg-config")

  ;;   ; Needed for fast JSON
  ;;   (package "libjansson4" "libjansson-dev")

  ;;   ; Dependencies for native compilation
  ;;   (package "zlib1g-dev" "libgccjit0" "libgccjit-10-dev" "gcc-10"))


  ;; (block "building Emacs 28 with native compilation and fast JSON"
  ;;   (with-sh-dir "emacs"
  ;;     (let [path (System/getenv "PATH") cc "gcc-10"]
  ;;       (with-sh-env {:PATH path :CC cc}
  ;;         (ensure-success (run "./autogen.sh"))
  ;;         (ensure-success (run "./configure --with-native-compilation"))
  ;;         (ensure-success (run "make"))
  ;;         (ensure-success (run "make install"))))))
  ;;   (ensure-success (run "rm -rf emacs")))

  ;; export LOG_PATH=/root/.emacs.d/configure.log
  ;; export CC="gcc-10" # TODO: inline it to make or configure or where is this supposed to go.
  ;; run-hide-stdout ./autogen.sh
  ;; run-verbosely ./configure --with-native-compilation # TODO: log into LOG_PATH, so I have it for a reference
  ;; run-hide-stdout make -j$(nproc)
  ;; run-hide-stdout make install
#+end_src

** Install basic tools

#+begin_src clojure :tangle scripts/install-basic-tools
  <<bb-helpers>>

  (block "installing basic tools"
    (package "locales automake htop curl wget git silversearcher-ag neovim docker.io tmux tree"))
#+end_src

** Rest
   :PROPERTIES:
   :header-args: :tangle scripts/install :noweb yes :shebang #!/usr/bin/env bb
   :END:

*** Node.js & Yarn sources

Add Yarn sources (without installing it).
https://yarnpkg.com/lang/en/docs/install/#debian-stable
https://github.com/nodesource/distributions

# curl -fsSL https://deb.nodesource.com/setup_16.x | bash -

#+begin_src clojure
  <<bb-helpers>>

  (block "adding apt sources for Node.js"
    (package "gnupg")
    (ensure-success (run "curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo deb https://dl.yarnpkg.com/debian/ stable main | tee /etc/apt/sources.list.d/yarn.list")))
#+end_src

*** Time zone

#+begin_src clojure
  (block "setting up time zone"
    (package "tzdata")
    (ensure-success (run "echo America/New_York > /etc/timezone"))
    (ensure-success (run "dpkg-reconfigure -f noninteractive tzdata")))
#+end_src

*** Dotfiles
**** TODO Tangle (in script/hooks/install)

#+begin_src clojure
  (block "installing dotfiles" (with-sh-dir "/root"
    (ensure-success (run "mkdir .ssh && chmod 700 .ssh && git clone https://github.com/jakub-stastny/dotfiles.git .dotfiles.git --bare && git --git-dir=/root/.dotfiles.git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*' && git --git-dir=/root/.dotfiles.git fetch && git --git-dir=/root/.dotfiles.git branch --set-upstream-to=origin/master master && git --git-dir=/root/.dotfiles.git --work-tree=/root checkout && ssh-keyscan github.com >> ~/.ssh/known_hosts && zsh ~/.scripts/hooks/dotfiles.install && git --git-dir=/root/.dotfiles.git remote set-url origin git@github.com:jakub-stastny/dotfiles.git && rm -rf ~/.ssh"))))

#+end_src

*** Expect

Install expect in order to be able to auto-login.

#+begin_src clojure
  (block "installing expect for auto-login scripts"
    (package "expect-dev"))
#+end_src

*** Clojure CLI

#+begin_src clojure
  (block "installing Clojure CLI"
    (let [script-name "linux-install.sh"]
      (ensure-success (run (str "curl https://download.clojure.org/install/linux-install-1.10.3.855.sh -O " script-name)
      (ensure-success (run (str "chmod +x " script-name))))
      (ensure-success (run (str "./" script-name)))
      (ensure-success (run (str "rm " script-name))))
#+end_src

*** GH CLI

#+begin_src clojure
  (block "installing GitHub CLI"
    (let [pkg-name "gh-cli.deb"]
      (download "https://github.com/cli/cli/releases/download/v1.11.0/gh_1.11.0_linux_amd64.deb" pkg-name)
      (ensure-success (run (str "dpkg -i " pkg-name)))
      (ensure-success (run (str "rm" pkg-name)))))
#+end_src

*** Make ZSH the default shell

#+begin_src clojure
  (block "making ZSH the default shell"
    (ensure-success (run "chsh -s $(which zsh)")))
#+end_src

*** Set up SSH and change root password

#+begin_src clojure
(println "SUCK MI DICK")
  ;; (block "setting up OpenSSH server and securing the installation"
  ;;   (package "openssh-server" "mosh")
  ;;   (ensure-success (run "mkdir /run/sshd"))
  ;;   (ensure-success (run "echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config"))
  ;;   (ensure-success (run "echo \"root:$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32)\" | chpasswd")))
#+end_src
