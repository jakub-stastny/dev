#+TITLE: My development environment image
#+AUTHOR: Jakub Šťastný

* Dockerfile
** Use the latest Ubuntu

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  FROM ubuntu:latest
#+END_SRC

** Set =WORKDIR= to =/root=

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  WORKDIR /root
#+END_SRC

** Set =TERM to =xterm-256color=

Silence =tput= warnings and show colours instead.

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ENV TERM=xterm-256color
#+END_SRC

** Set up =$PATH=

Even though we do this in dotfiles, having it exported means we can use these custom scripts when building a DPM image. For instance in the home image we use dotfiles from ~/.script/dotfiles.

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ENV PATH="/root/.scripts:${PATH}"
#+END_SRC

** Fix locale

- Ubuntu has broken locale. We need to set the variables here, in order for them to be available both to the install script and to the final environment.
- Locale is generated in the install script.
- There's a Perl locale error when setting up locales. Ignore.

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  RUN apt-get update > /dev/null && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y > /dev/null

  ENV LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8
  RUN apt-get install -y locales > /dev/null && locale-gen $LC_ALL
#+END_SRC

** Install ZSH as a prerequisite for the build scripts

#+begin_src shell
  DEBIAN_FRONTEND=noninteractive apt-get install -y zsh > /dev/null
#+end_src

** Add the build scripts

- Let's not delete the build scripts afterwards, they might come in handy for future inspection.

- Whatever runs inside the script don't get cached,
- not suited for compilations.

- With that said this should be environment agnostic,
- it should provide sources to install commonly used
- utilities, not necessary include them.

Since the =mtime= will change every time we tangle this file.

BROKEN into several scripts, that way we get caching.

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ADD scripts /build
  RUN /build/unminimise-system
  RUN /build/build-emacs
  RUN /build/install-basic-tools
  RUN /build/install
#+END_SRC

** Save build metadata

We are passing these build args to =docker build= in [[./bin/build]].

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ARG DOCKER_IMAGE_GIT_SHA
  ARG DOCKER_IMAGE_BUILD_DATE

  ENV DOCKER_IMAGE_GIT_SHA=$DOCKER_IMAGE_GIT_SHA
  ENV DOCKER_IMAGE_BUILD_DATE=$DOCKER_IMAGE_BUILD_DATE
#+END_SRC

** Run OpenSSH server

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ENV SSHD_PORT=2222
  CMD /usr/sbin/sshd -p $SSHD_PORT -D -e
#+END_SRC

* The build scripts
** Unminimise the system

This makes man pages available.

Gives =Reinstallation of gh is not possible, it cannot be downloaded.=, so GH CLI has to be installed after.

#+BEGIN_SRC shell :tangle scripts/unminimise-system :mkdirp yes :shebang #!/usr/bin/env zsh
  echo "$(tput setaf 2)~ $(tput setaf 5)$(date +%H:%M:%S)$(tput sgr0) Unminimising the system."
  time(DEBIAN_FRONTEND=noninteractive apt-get install -y man > /dev/null)
  time (yes | unminimize > /dev/null)
#+END_SRC

** Install Emacs 28 with native compilation and fast JSON parser

#+BEGIN_SRC shell :tangle scripts/build-emacs :mkdirp yes :shebang #!/usr/bin/env zsh
  echo "$(tput setaf 2)~ $(tput setaf 5)$(date +%H:%M:%S)$(tput sgr0) Installing Emacs 28."

  export DEBIAN_FRONTEND=noninteractive
  export LOG_PATH=/root/.emacs.d/configure.log
  export CC="gcc-10"

  # Install Git
  apt-get install -y git

  git clone --depth 1 https://git.savannah.gnu.org/git/emacs.git

  # Dependencies from https://packages.ubuntu.com/impish/emacs-nox
  apt-get install -y libacl1 libasound2 libc6 libdbus-1-3 libgmp10 libgnutls30 libgpm2 libjansson4 liblcms2-2 libselinux1 libsystemd0 libtinfo6 libxml2 zlib1g > /dev/null

  # Dependencies for building Emacs.
  apt-get install -y build-essential makeinfo

  # Needed for fast JSON
  apt-get install -y libjansson4 libjansson-dev > /dev/null

  # Dependencies for native compilation
  apt-get install -y zlib1g-dev libgccjit0 libgccjit-10-dev gcc-10 > /dev/null

  echo "$(tput setaf 2)~ $(tput setaf 5)$(date +%H:%M:%S)$(tput sgr0) Building Emacs 28."
  cd emacs
  ./autogen.sh && ./configure --with-native-compilation && make -j$(nproc) && make install
  # ./autogen.sh && ./configure --with-native-compilation > $LOG_PATH && make -j$(nproc) > /dev/null && make install > /dev/null
#+END_SRC

** Install basic tools

#+BEGIN_SRC shell :tangle scripts/install-basic-tools :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~ $(tput setaf 5)$(date +%H:%M:%S)$(tput sgr0) Installing basic tools."

  export DEBIAN_FRONTEND=noninteractive

  apt-get install -y zsh apt-utils locales automake htop curl wget git silversearcher-ag neovim docker.io tmux tree > /dev/null
#+END_SRC

** Rest
*** Node.js & Yarn sources

Add Yarn sources (without installing it).
https://yarnpkg.com/lang/en/docs/install/#debian-stable
https://github.com/nodesource/distributions

# curl -fsSL https://deb.nodesource.com/setup_16.x | bash -

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Adding apt sources for Node.js."

  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
#+END_SRC

*** Deno

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Installing Deno."
  apt-get install -y unzip > /dev/null
  wget -q https://github.com/denoland/deno/releases/download/v1.10.3/deno-x86_64-unknown-linux-gnu.zip && unzip deno-x86_64-unknown-linux-gnu.zip && mv deno /usr/bin/ && rm deno-x86_64-unknown-linux-gnu.zip
#+END_SRC

*** Time zone

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Setting up time zone."
  apt-get install -y tzdata apt-utils > /dev/null && echo "America/New_York" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata
#+END_SRC

*** Dotfiles
**** TODO Tangle (in script/hooks/install)

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Installing dotfiles."
  cd /root && mkdir .ssh && chmod 700 .ssh && git clone https://github.com/jakub-stastny/dotfiles.git .dotfiles.git --bare && git --git-dir=/root/.dotfiles.git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git --git-dir=/root/.dotfiles.git fetch && git --git-dir=/root/.dotfiles.git branch --set-upstream-to=origin/master master && git --git-dir=/root/.dotfiles.git --work-tree=/root checkout && ssh-keyscan github.com >> ~/.ssh/known_hosts && zsh ~/.scripts/hooks/dotfiles.install && git --git-dir=/root/.dotfiles.git remote set-url origin git@github.com:jakub-stastny/dotfiles.git && rm -rf ~/.ssh
#+END_SRC

*** Expect

Install expect in order to be able to auto-login.

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Installing expect for auto-login scripts."
  apt-get install -y expect-dev > /dev/null
#+END_SRC

*** Clojure & babashka

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Installing Clojure CLI & babashka."
  curl -O https://download.clojure.org/install/linux-install-1.10.3.855.sh && chmod +x linux-install-1.10.3.855.sh && ./linux-install-1.10.3.855.sh && rm linux-install-1.10.3.855.sh

  curl https://raw.githubusercontent.com/babashka/babashka/master/install | bash
#+END_SRC

*** GH CLI

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Installing GitHub CLI."
  wget -q https://github.com/cli/cli/releases/download/v1.11.0/gh_1.11.0_linux_amd64.deb && dpkg -i gh_1.11.0_linux_amd64.deb && rm gh_1.11.0_linux_amd64.deb
#+END_SRC

*** Make ZSH the default shell

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Making ZSH the default shell."
  chsh -s $(which zsh)
#+END_SRC

*** Set up SSH and change root password

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Setting the OpenSSH server and securing the installation."
  apt-get install -y openssh-server mosh > /dev/null && mkdir /run/sshd
  echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
  echo "root:$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32)" | chpasswd
#+END_SRC
