#+TITLE: Development environment

* Installation

** Emacs packages

Note that we need major modes for all the languages of the code blocks in our code, otherwise Emacs will export them without highlighted syntax when publishing.

*Instructions:* In Emacs navigate your cursor to the following code block and press =C-c C-c= to evaluate.

#+begin_src elisp :results silent
  (dolist (package '(dockerfile-mode clojure-mode htmlize))
    (unless (package-installed-p package)
      (message "~ Installing %s." package)
      (package-install package)))
#+end_src


* Configuration

*Instructions:* In Emacs press =C-c C-v t= to tangle all the code blocks in this file.

** Emacs per-project configuration
   :PROPERTIES:
   :header-args: :tangle .env/emacs.el :mkdirp yes :noweb yes
   :END:

We want to keep environment-specific configuration out of our =~/.emacs=.

Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/elisp/literate-programming.el][~/zsh/environments/elisp/literate-programming.el]]

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.zsh/environments/elisp"))

  (load "literate-programming")
  (load-theme 'modus-vivendi)
#+end_src

*** Autoloading files

This allows us to decouple for instance the [[./publishing.org::#publishing-script][publishing helper]] from the development setup file.

**** Links

- [[https://www.emacswiki.org/emacs/LoadingLispFiles][Loading Lisp files]] (EmacsWiki).

#+begin_src emacs-lisp
  (defun load-directory (directory)
    "Load recursively all `.el' files in DIRECTORY."
    (dolist (element (directory-files-and-attributes directory nil nil nil))
      (let* ((path (car element))
             (fullpath (concat directory "/" path))
             (isdir (car (cdr element)))
             (ignore-dir (or (string= path ".") (string= path ".."))))
        (cond
         ((and (eq isdir t) (not ignore-dir))
          (load-directory fullpath))
         ((and (eq isdir nil) (string= (substring path -3) ".el"))
          (load (file-name-sans-extension fullpath)))))))
#+end_src

#+begin_src emacs-lisp
  (setq elisp-autoload-dir (concat (getenv "PROJECT_ROOT") "/.env/elisp/autoload"))
  (load-directory elisp-autoload-dir)
#+end_src

** ZSH per-project configuration
   :PROPERTIES:
   :header-args: :tangle .env/zsh.zsh :mkdirp yes :noweb yes
   :END:

*** Dependencies

- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/helpers.zsh][~/zsh/environments/helpers.zsh]]
- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/basic.zsh][~/zsh/environments/basic.zsh]]
- Dotfiles: [[https://github.com/jakub-stastny/dotfiles/blob/master/.zsh/environments/emacs.zsh][~/zsh/environments/emacs.zsh]]

#+begin_src shell
  load ~/.zsh/environments/helpers.zsh && save-function-list
  load ~/.zsh/environments/emacs.zsh
  load ~/.zsh/environments/basic.zsh
  load ~/.zsh/environments/git.zsh
  load ~/.zsh/environments/docker.zsh
#+end_src

*** Tangling

We compile on save, but for the first-time compilation, we want to be able to do it from the shell, rather than having to go and tangle manually each file from Emacs.

**** Links

- [[https://orgmode.org/manual/Batch-Execution.html#Batch-Execution][Batch execution]] (Orgmode.org)

#+name: tangle-files
#+begin_src emacs-lisp :tangle no
  (progn (dolist (file command-line-args-left) (with-current-buffer (find-file-noselect file) (org-babel-tangle))))
#+end_src

Use =tangle= with no arguments to tangle all the orgmode files in the project or with arguments, such as =tangle development-environment.org=.

#+begin_src shell
  tangle() {
    if [ $# -eq 0 ]; then
      emacs -Q --batch --eval "<<tangle-files>>" *.org
    else
      emacs -Q --batch --eval "<<tangle-files>>" "$@"
    fi
  }
#+end_src

*** Push to DockerHub

#+begin_src shell
  push() {
    docker push jakubstastny/dev
  }
#+end_src

**** Links

- [[https://hub.docker.com/repository/docker/jakubstastny/dev][The published image]] page.

**** Considerations

- It might be worth to check out the [[https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry][GitHub container registry]].

*** Main

#+begin_src shell
  docker-login
  start-emacs-session
  rename-first-tab

  report-custom-functions
#+end_src
