#+OPTIONS: toc:nil html-postamble:nil tex:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles.css"/>

* About

# We show this file only on GH. GH happens to show the SVG correctly,
# so there's no need for the export block we use for the Orgmode export.
[[https://github.com/jakub-stastny/dev/actions/workflows/test.yml][https://github.com/jakub-stastny/dev/actions/workflows/test.yml/badge.svg]]

My development environment with my favourite tools and dotfiles packed as a Docker image.

This way I can use it as a base for per-project image and spin containers off of it, in order to separate my projects and keep my host system clean and state-less and therefore easily reinstallable.

Although containers are ephemeral, we can keep our SSH keys, shell history and other desirable files by using Docker volumes.

We can manage these images either manually, or with [[https://github.com/jakub-stastny/docker-project-manager][docker-project-manager]], which I created specifically for this purpose.

#+begin_src ditaa :file graph.png :cmdline --round-corners
  +---------+
  | cBLU    |
  |         |
  |    +----+
  |    |cPNK|
  |    |    |
  +----+----+
#+end_src

#+RESULTS:
[[file:graph.png]]

* Usage

First, let's create a new directory for our project. Let's call the project =rental-property-management=:

#+begin_src shell
  mkdir rental-property-management && cd rental-property-management
#+end_src

** Dockerfile

Next, let's start with the =Dockerfile=. Obviously we use the =dev= image as our base:

#+begin_src dockerfile
FROM jakubstastny/dev:latest
#+end_src

*** SSH keys

First, we need to copy our public SSH key into =.ssh/authorized_keys=:

#+begin_src shell
  mkdir .ssh && echo "<your-public-ssh-key>" > .ssh/authorized_keys
#+end_src

This is important, so you can SSH into the running container.

Next, let's generate a new pair of SSH keys for the project:

#+begin_src shell
  mkdir .ssh && ssh-keygen -t rsa -f .ssh/id_rsa
#+end_src

You will need to add the generated /public/ SSH key into your GitHub settings, in order to be able to push to your repositories (and clone any private repository that you might need).

Now let's copy the key pair to the image:

#+begin_src dockerfile
COPY .ssh /root/.ssh
#+end_src

** Clone your repo and set up your projects

This is really up to you. You might use something like this:

#+begin_src dockerfile
RUN ssh-keyscan -H github.com >> ~/.ssh/known_hosts && dotfiles pull -r && git clone git@github.com:jakub-stastny/dev.git
#+end_src

** SSHD port

For your first image, you don't have to worry about this. The default =SSHD_PORT= is =2222=.

However if you want to run multiple of these images in paralel, you'll need to override the =SSHD_PORT=, so that it's unique like so:

#+begin_src dockerfile
ENV SSHD_PORT=2223
#+end_src

Now you're good to go. Assuming that you have the container on a VPS like I do, you can connect directly to it by SSH without having to go through the host machine first:

#+begin_src shell
  ssh root@ip:2222
#+end_src

And that's about it. There is [[https://jakub-stastny.github.io/dev/][development documentation]] in case you want to fork and tweak for yourself. Enjoy!
