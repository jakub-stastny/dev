* About

[[https://github.com/jakub-stastny/dev/actions/workflows/test.yml][https://github.com/jakub-stastny/dev/actions/workflows/test.yml/badge.svg]]

My development environment with my favourite tools and dotfiles.

I use it with [[https://github.com/jakub-stastny/docker-project-manager][docker-project-manager]], which automates the usual project workflow: creating a project, spinning off a Docker image with that environment, creating a new pair of SSH keys and setting up port sharing. The resulting container runs OpenSSH server and can be SSH'd into directly, without the need to connect to the host machine first.

GitHub doesn't parse Orgmode files properly. Read the [[https://jakub-stastny.github.io/dev/][exported documentation]].

* Usage

** Manual

For each of my projects I create a new directory

*** Dockerfile

Obviously we use the dev image as our base:

#+begin_src dockerfile
FROM jakubstastny/dev:latest

COPY .env /root/.env

RUN ssh-keyscan -H github.com >> ~/.ssh/known_hosts && dotfiles pull -r && git clone git@github.com:jakub-stastny/dev.git
#+end_src

*** SSH keys

It's a good idea to generate a pair of SSH keys for the project:

#+begin_src shell
  mkdir .ssh
  ssh-keygen -t rsa -f .ssh/id_rsa
#+end_src

Now let's copy the key pair to the image:

#+begin_src dockerfile
COPY .ssh /root/.ssh
#+end_src

*** SSHD port

For your first image, you don't have to worry about this. The default =SSHD_PORT= is =2222=.

However if you want to run multiple of these images in paralel, you'll need to override the =SSHD_PORT=, so that it's unique like so:

#+begin_src dockerfile
ENV SSHD_PORT=2223
#+end_src

** With [[https://github.com/jakub-stastny/docker-project-manager][docker-project-manager]]

Please note, that this workflow can be automated using [[https://github.com/jakub-stastny/docker-project-manager][docker-project-manager]], which I developed specifically for this purpose.



I use it with [[https://github.com/jakub-stastny/docker-project-manager][docker-project-manager]], which automates the usual project workflow: creating a project, spinning off a Docker image with that environment, creating a new pair of SSH keys and setting up port sharing. The resulting container runs OpenSSH server and can be SSH'd into directly, without the need to connect to the host machine first.

#+begin_src ditaa :file graph.png :cmdline --round-corners
  +---------+
  | cBLU    |
  |         |
  |    +----+
  |    |cPNK|
  |    |    |
  +----+----+
#+end_src

#+RESULTS:
[[file:graph.png]]
