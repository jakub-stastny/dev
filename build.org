#+TITLE: Rental property management: main module
#+AUTHOR: Jakub Šťastný

* Dockerfile
** Use the latest Ubuntu

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  FROM ubuntu:latest
#+END_SRC

** Set =WORKDIR= to =/root=

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  WORKDIR /root
#+END_SRC

** Set up =$PATH=

Even though we do this in dotfiles, having it exported means we can use these custom scripts when building a DPM image. For instance in the home image we use dotfiles from ~/.script/dotfiles.

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ENV PATH="/root/.scripts:${PATH}"
#+END_SRC

** Fix locale

- Ubuntu has broken locale. We need to set the variables here, in order for them to be available both to the install script and to the final environment.
- Locale is generated in the install script.
- There's a Perl locale error when setting up locales. Ignore.

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

  ENV LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8
  RUN apt-get install -y locales && locale-gen $LC_ALL
#+END_SRC

** Add the build scripts

- Let's not delete the build scripts afterwards, they might come in handy for future inspection.

- Whatever runs inside the script don't get cached,
- not suited for compilations.

- With that said this should be environment agnostic,
- it should provide sources to install commonly used
- utilities, not necessary include them.

*** TODO See whether this doesn't invalidate Docker cache

Since the =mtime= will change every time we tangle this file.

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ADD scripts /build
  RUN /build/install
#+END_SRC

** Save build metadata

We are passing these build args to =docker build= in [[./bin/build]].

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ARG DOCKER_IMAGE_GIT_SHA
  ARG DOCKER_IMAGE_BUILD_DATE

  ENV DOCKER_IMAGE_GIT_SHA=$DOCKER_IMAGE_GIT_SHA
  ENV DOCKER_IMAGE_BUILD_DATE=$DOCKER_IMAGE_BUILD_DATE
#+END_SRC

** Run OpenSSH server

#+BEGIN_SRC Dockerfile :tangle Dockerfile
  ENV SSHD_PORT=2222
  CMD /usr/sbin/sshd -p $SSHD_PORT -D -e
#+END_SRC

* The build script

# This used to be ZSH script, but considering it's not really doing
# anything complex, I prefer to simplify Dockerfile by not having to
# install ZSH upfront.

** Install basic tools

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  # This is needed so tput doesn't complain.
  #export TERM=xterm-256color

  export DEBIAN_FRONTEND=noninteractive

  apt-get install -y zsh apt-utils locales automake htop sudo curl git silversearcher-ag neovim docker.io tmux emacs-nox tree
#+END_SRC

** Node.js & Yarn sources

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  # Add Yarn sources (without installing it).
  # https://yarnpkg.com/lang/en/docs/install/#debian-stable
  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

  # https://github.com/nodesource/distributions
  curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
#+END_SRC

** Deno

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  wget https://github.com/denoland/deno/releases/download/v1.10.3/deno-x86_64-unknown-linux-gnu.zip && unzip deno-x86_64-unknown-linux-gnu.zip && mv deno /usr/bin/ && rm deno-x86_64-unknown-linux-gnu.zip
#+END_SRC

** Time zone

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  apt-get install -y tzdata apt-utils && echo "America/New_York" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata
#+END_SRC

** Emacs

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Installing Emacs."
  apt-get install -y emacs-nox
#+END_SRC

** Dotfiles

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  cd /root && mkdir .ssh && chmod 700 .ssh && git clone https://github.com/jakub-stastny/dotfiles.git .dotfiles.git --bare && git --git-dir=/root/.dotfiles.git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git --git-dir=/root/.dotfiles.git fetch && git --git-dir=/root/.dotfiles.git branch --set-upstream-to=origin/master master && git --git-dir=/root/.dotfiles.git --work-tree=/root checkout && ssh-keyscan github.com >> ~/.ssh/known_hosts && zsh ~/.scripts/hooks/dotfiles.install && git --git-dir=/root/.dotfiles.git remote set-url origin git@github.com:jakub-stastny/dotfiles.git && rm -rf ~/.ssh
#+END_SRC

** Expect

Install expect in order to be able to auto-login.

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  echo "$(tput setaf 2)~$(tput sgr0) Installing expect for auto-login scripts."
  apt-get install -y expect-dev
#+END_SRC

** Clojure & babashka

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  curl -O https://download.clojure.org/install/linux-install-1.10.3.855.sh && chmod +x linux-install-1.10.3.855.sh && ./linux-install-1.10.3.855.sh

  curl https://raw.githubusercontent.com/babashka/babashka/master/install | bash
#+END_SRC

** GH CLI

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  wget https://github.com/cli/cli/releases/download/v1.11.0/gh_1.11.0_linux_amd64.deb && dpkg -i gh_1.11.0_linux_amd64.deb && rm gh_1.11.0_linux_amd64.deb
#+END_SRC

** Make ZSH the default shell

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  chsh -s $(which zsh)
#+END_SRC

** Set up SSH and change root password

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  apt-get install -y openssh-server mosh && mkdir /run/sshd
  echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
  echo "root:$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32)" | chpasswd
#+END_SRC

** Unminimise the system

This makes man pages available.

#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes :shebang #!/bin/sh
  yes | unminimize
#+END_SRC
