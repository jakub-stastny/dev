#+TITLE: Rental property management: main module
#+AUTHOR: Jakub Šťastný

* Dockerfile
** Ubuntu

#+BEGIN_SRC Dockerfile :tangle yes
  FROM ubuntu:21.04
#+END_SRC

** Build metadata

#+BEGIN_SRC Dockerfile :tangle yes
  ARG BUILD_METADATA
#+END_SRC

** Fix locale

- First update the system, so we can fix the locale.
- Ubuntu has broken locale.
- We need to set these here, in order for them to be available
- both to the install script and to the final environment.
- Locale is generated in the install script.
- There's a Perl locale error when setting up locales. Ignore.

#+BEGIN_SRC Dockerfile :tangle yes
  RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

  ENV LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8
  RUN apt-get install -y locales && locale-gen $LC_ALL
#+END_SRC

** Add the build scripts

- Let's not delete the build scripts afterwards,
- they might come in handy for future inspection.

- Whatever runs inside the script don't get cached,
- not suited for compilations.

- With that said this should be environment agnostic,
- it should provide sources to install commonly used
- utilities, not necessary include them.

#+BEGIN_SRC Dockerfile :tangle yes
  ADD scripts /build
  RUN /build/install
#+END_SRC

** Set up =$PATH=

- Even though we do this in dotfiles,
- having it exported means we can use these custom scripts
- when building a DPM image.

- For instance in the home image we use dotfiles from ~/.script/dotfiles.

#+BEGIN_SRC Dockerfile :tangle yes
  ENV PATH="/root/.scripts:${PATH}"
#+END_SRC

** Save build metadata
 
#+BEGIN_SRC Dockerfile :tangle yes
  RUN echo "$BUILD_METADATA" > /build/metadata.json
#+END_SRC

** Set =WORKDIR=

#+BEGIN_SRC Dockerfile :tangle yes
  WORKDIR /root
#+END_SRC

** Run OpenSSH server

#+BEGIN_SRC Dockerfile :tangle yes
  # CMD ["/usr/sbin/sshd", "-p", "2222", "-D", "-e"]
  ENV SSHD_PORT=2222
  CMD /usr/sbin/sshd -p $SSHD_PORT -D -e
#+END_SRC


#+BEGIN_SRC shell :tangle scripts/install :mkdirp yes
#!/bin/sh

# This used to be ZSH script, but considering it's not really doing
# anything complex, I prefer to simplify Dockerfile by not having to
# install ZSH upfront.

# This is needed so tput doesn't complain.
#export TERM=xterm-256color

export DEBIAN_FRONTEND=noninteractive

apt-get install -y zsh apt-utils locales automake htop sudo curl git silversearcher-ag neovim docker.io tmux emacs-nox tree

apt-get install -y build-essential wget && wget -O ruby-install-0.8.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.8.1.tar.gz && tar -xzvf ruby-install-0.8.1.tar.gz && cd ruby-install-0.8.1 && make install && cd .. && rm -rf ruby-install-0.8.1*

# Add Yarn sources (without installing it).
# https://yarnpkg.com/lang/en/docs/install/#debian-stable
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

wget -O chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz && tar -xzvf chruby-0.3.9.tar.gz && cd chruby-0.3.9 && make install && cd .. && rm -rf chruby-0.3.9*

# https://github.com/nodesource/distributions
curl -fsSL https://deb.nodesource.com/setup_16.x | bash -

wget https://github.com/denoland/deno/releases/download/v1.10.3/deno-x86_64-unknown-linux-gnu.zip && unzip deno-x86_64-unknown-linux-gnu.zip && mv deno /usr/bin/ && rm deno-x86_64-unknown-linux-gnu.zip

apt-get install -y tzdata apt-utils && echo "America/New_York" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata

cd /root && mkdir .ssh && chmod 700 .ssh && git clone https://github.com/jakub-stastny/dotfiles.git .dotfiles.git --bare && git --git-dir=/root/.dotfiles.git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git --git-dir=/root/.dotfiles.git fetch && git --git-dir=/root/.dotfiles.git branch --set-upstream-to=origin/master master && git --git-dir=/root/.dotfiles.git --work-tree=/root checkout && ssh-keyscan github.com >> ~/.ssh/known_hosts && zsh ~/.scripts/hooks/dotfiles.install && git --git-dir=/root/.dotfiles.git remote set-url origin git@github.com:jakub-stastny/dotfiles.git && rm -rf ~/.ssh

# Install expect in order to be able to auto-login.
echo "$(tput setaf 2)~$(tput sgr0) Installing expect for auto-login scripts."
apt-get install -y expect-dev

# Emacs.
echo "$(tput setaf 2)~$(tput sgr0) Installing Emacs."
apt-get install -y emacs-nox

# GH CLI.
wget https://github.com/cli/cli/releases/download/v1.11.0/gh_1.11.0_linux_amd64.deb && dpkg -i gh_1.11.0_linux_amd64.deb && rm gh_1.11.0_linux_amd64.deb

# ZSH is the default shell.
chsh -s $(which zsh)

# SSH
apt-get install -y openssh-server mosh && mkdir /run/sshd
echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
echo "root:$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32)" | chpasswd

yes | unminimize
#+END_SRC
