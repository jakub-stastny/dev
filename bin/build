#!/usr/bin/env ruby

require 'json'
require 'open3'
require 'date'

DATE  = DateTime.now.iso8601
IMAGE = 'jakubstastny/dev'

LOG, LOG_PREV = 'build.log', 'prev_build.log'
STDERR_LOG, STDERR_LOG_PREV = 'build.stderr.log', 'prev_build.stderr.log'

BUILD_METADATA = {
  DOCKER_IMAGE_GIT_SHA: `git rev-parse HEAD`.chomp,
  DOCKER_IMAGE_BUILD_DATE: DATE
}

def run(command_args, log, &block)
  command = command_args.reduce do |buffer, chunk|
    [buffer, chunk.match(/ /) ? "'#{chunk}'" : chunk].join(' ')
  end

  puts "\n#{`tput setaf 1`}# #{`tput setaf 7`}#{command}#{`tput sgr0`}"
  log.puts("\n$ #{command}")
  Open3.popen3(*command_args) do |_, stdout, stderr, status_thread|
    block.call(stdout, stderr, status_thread)
  end
end

def main # So we can rescue
  commands = [
    ['docker', 'pull', 'ubuntu'],
    ['git', 'commit', '-a', '-m', "Automated commit from '#$0' on #{DATE}"],
  ]

  docker_build_metadata = BUILD_METADATA.map { |key, value| ["--build-arg", "#{key}=#{value}"] }.flatten
  docker_build_command = [
    'docker', 'build', '.', '-t', IMAGE, *docker_build_metadata
  ]

  File.rename(LOG, LOG_PREV) if File.exist?(LOG)
  File.rename(STDERR_LOG, STDERR_LOG_PREV) if File.exist?(STDERR_LOG)

  File.open(LOG, 'w') do |log|
    commands.each do |command_args|
      run(command_args, log) do |stdout, stderr, status_thread|
        [stdout, stderr].each do |stream|
          stream.each_line do |line|
            puts line; log.puts(line)
          end
        end
      end
    end

    puts "\n#{`tput setaf 2`}~#{`tput sgr0`} Metadata: #{`tput setaf 7`}#{BUILD_METADATA.to_json}#{`tput sgr0`}"
    log.puts "\n~ Metadata: #{BUILD_METADATA.to_json}"

    File.open(STDERR_LOG, 'w') do |stderr_log|
      run(docker_build_command, log) do |stdout, stderr, status_thread|
        stdout.each_line do |line|
          puts line; log.puts(line)
        end

        stderr.each_line do |line|
          puts line; log.puts(line); stderr_log.puts(line)
        end

        unless status_thread.value.success?
          abort "\n#{`tput setaf 1`}Something failed during docker build!#{`tput sgr0`}\n\nCheck the log files for details."
        end
      end
    end
  end
rescue Interrupt
  puts
ensure
  Dir.glob('*.log').each do |log_file|
    File.unlink(log_file) if File.zero?(log_file)
  end
end

start_build_time = Time.now
main

puts "\n#{`tput setaf 4`}Build time:#{`tput sgr0`} #{(Time.now - start_build_time) / 60} min"
